model_name: ScaphoidPointAttN

dataset : {
  train : { _base_: dataset_configs/ScaphoidDataset.yaml,
            others: {subset: 'train'}},
  val : { _base_: dataset_configs/ScaphoidDataset.yaml,
            others: {subset: 'val'}},
  test : { _base_: dataset_configs/ScaphoidDataset.yaml,
            others: {subset: 'test'}},
  transform_with: 'volar',  # does not matter, as we use static transforms
  reverse_transforms: 'no',    # 'for training' # 'for logging only'   # 'no'
  transforms : [
    'StaticDecoupledDemeaning', 
    'StaticDecoupledRandomRotation',
    'CoupledRescale',
  ],
}

0_comment: "concat->FE + SG without input | StaticDecoupledDemeaning, StaticDecoupledRandomRotation, CoupledRescale"
model : {
    NAME: ScaphoidPointAttN,
    num_points: 8192,
    arch: static_affiliation_volar,
    available_archs: {
      default_arch_volar: [feature_extractor: {in: volar, out: shape_code_v}, seed_generator_to_sparse: {in: volar, shape_code: shape_code_v, out: sparse_pc}, point_generator: {seeds: sparse_pc, shape_code: shape_code_v, out: points}],
      default_arch_dorsal: [feature_extractor: {in: dorsal, out: shape_code_d}, seed_generator_to_sparse: {in: dorsal, shape_code: shape_code_d, out: sparse_pc}, point_generator: {seeds: sparse_pc, shape_code: shape_code_d, out: points}],
      default_arch_max: [concat_2: {in: [volar, dorsal], out: concat}, feature_extractor: {in: concat, out: shape_code_v_d}, seed_generator_to_sparse: {in: concat, shape_code: shape_code_v_d, out: sparse_pc}, point_generator: {seeds: sparse_pc, shape_code: shape_code_v_d, out: points}],
      
      # only volar used
      default_arch_volar_static: [feature_extractor: {in: volar, out: shape_code_v}, seed_generator: {shape_code: shape_code_v, out: seeds}, point_generator: {seeds: seeds, shape_code: shape_code_v, out: points}],
      
      # only dorsal used
      default_arch_dorsal_static: [feature_extractor: {in: dorsal, out: shape_code_d}, seed_generator: {shape_code: shape_code_d, out: seeds}, point_generator: {seeds: seeds, shape_code: shape_code_d, out: points}],
      
      # volar and dorsal aligned and used together
      default_arch_max_static: [concat_2: {in: [volar, dorsal], out: concat}, feature_extractor: {in: concat, out: shape_code_v_d}, seed_generator: {shape_code: shape_code_v_d, out: seeds}, point_generator: {seeds: seeds, shape_code: shape_code_v_d, out: points}],

      double_net: [ feature_extractor: {in: volar, out: shape_code_v}, seed_generator: {shape_code: shape_code_v, out: seeds_v}, point_generator: {seeds: seeds_v, shape_code: shape_code_v, out: points_v}, 
                    feature_extractor: {in: dorsal, out: shape_code_d}, seed_generator: {shape_code: shape_code_d, out: seeds_d}, point_generator: {seeds: seeds_d, shape_code: shape_code_d, out: points_d}, 
                    concat_2: {in: [seeds_v, seeds_d], out: seeds}, concat_2: {in: [pre_points_v, pre_points_d], out: pre_points}, concat_2: {in: [points_v, points_d], out: points}, 
                    assign: {seeds: seeds, sparse_pc: seeds, pre_points: pre_points, points: points}],

      static_concat: [feature_extractor: {in: volar, out: shape_code_v}, feature_extractor: {in: dorsal, out: shape_code_d}, concat_1: {in: [shape_code_v, shape_code_d], out: shape_code_c}, 
                      seed_generator_to_sparse: {in: dorsal, shape_code: shape_code_c, out: sparse_pc}, point_generator_static: {seeds: sparse_pc, shape_code: shape_code_c, out: points}],

      static_affiliation_null: [affil_enricher: {in: [volar, dorsal], out: xyz_affil}, feature_extractor_affil: {in: xyz_affil, out: shape_code_affil}, 
                      seed_generator: {shape_code: shape_code_affil, out: sparse_pc}, point_generator_static: {seeds: sparse_pc, shape_code: shape_code_affil, out: points}],

      static_affiliation_volar: [affil_enricher: {in: [volar, dorsal], out: xyz_affil}, feature_extractor_affil: {in: xyz_affil, out: shape_code_affil}, 
                      seed_generator_to_sparse: {in: volar, shape_code: shape_code_affil, out: sparse_pc}, point_generator_static: {seeds: sparse_pc, shape_code: shape_code_affil, out: points}],

      static_affiliation_dorsal: [affil_enricher: {in: [volar, dorsal], out: xyz_affil}, feature_extractor_affil: {in: xyz_affil, out: shape_code_affil}, 
                      seed_generator_to_sparse: {in: dorsal, shape_code: shape_code_affil, out: sparse_pc}, point_generator_static: {seeds: sparse_pc, shape_code: shape_code_affil, out: points}],

      static_affiliation_affil: [affil_enricher: {in: [volar, dorsal], out: xyz_affil}, feature_extractor_affil: {in: xyz_affil, out: shape_code_affil}, 
                      seed_generator_to_sparse: {in: xyz_affil, shape_code: shape_code_affil, out: sparse_pc}, point_generator_static: {seeds: sparse_pc, shape_code: shape_code_affil, out: points}],
    
    },

    available_building_blocks : {
      # feature_extractor: concat, # separate, mix
      
      
      feature_extractor: {type: 'FE', keys: [in, out], mode: 'pointattn'},
      feature_extractor_affil: {type: 'FE', keys: [in, out], mode: 'affil'},
      feature_extractor_intermediate: {type: 'FE', keys: [in, out], mode: 'FE-'}, # feature_extractor, but stops before compressing features into shape code
      feature_extractor_tnet: {type: 'FE', keys: [in, out], mode: 'TNet'}, 

      seed_attn_matcher: {type: 'SAM', keys: [in, seeds, out], mode: 'attn'}, # seed attention matcher that takes the features and the seeds and generates a shape code
      
      seed_generator: {type: 'SG', keys: [shape_code, out], mode: 'SG-'}, # seed_generator that only takes the shape code and generates seeds
      seed_generator_to_sparse: {type: 'SG', keys: [in, shape_code, out], mode: 'pointattn'},  # seed_generator that also adds the input points to the seeds and does fps to create sparse_pc
      
      point_generator: {type: 'PG', keys: [seeds, shape_code, out], mode: 'pointattn'},
      point_generator_static: {type: 'PG', keys: [seeds, shape_code, out], mode: 'static'},
      
      t_net_input: {type: 'TNet', keys: [in, out, K], mode: 'input'},
      t_net_features: {type: 'TNet', keys: [in, out, K], mode: 'features'},

      seeds_to_sparse_pc: {type: 'OP', keys: [in, out], mode: 'seeds_to_sparse_pc'},
      concat_2: {type: 'OP', keys: [in, out], mode: 'concat-dim-2'},
      concat_1: {type: 'OP', keys: [in, out], mode: 'concat-dim-1'},
      affil_enricher: {type: 'OP', keys: [in, out], mode: 'affil'},
      fps: {type: 'OP', keys: [in, out], mode: 'fps'},
      assign: {type: 'ASSIGN', keys: [seeds, sparse_pc, pre_points, points], mode: 'assign'},
    }
}

optimizer : {
  type: AdamW,
  kwargs: {
  lr : 0.0001,
  weight_decay : 0.0005
}}

scheduler: {
  type: LambdaLR,
  kwargs: {
  decay_step: 21,
  lr_decay: 0.9,
  lowest_decay: 0.02  # min lr = lowest_decay * lr
}}

bnmscheduler: {
  type: Lambda,
  kwargs: {
  decay_step: 21,
  bn_decay: 0.5,
  bn_momentum: 0.9,
  lowest_decay: 0.01
}}

# test
save_vis: False


total_bs: 32
step_per_update : 1
max_epoch : 600

consider_metric: CDL1
